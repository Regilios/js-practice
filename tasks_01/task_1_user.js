function User(){
	var username, password;

	function doLogin(user,pw) {
		username = user;
		password = pw;

		console.log(username);
		console.log(password);
	}

	var publicAPI = {
		login: doLogin
	};

	return publicAPI;
}

// создать экземпляр модуля `User`
var fred = User();

fred.login( "fred", "12Battery34!" );
/**
 *  Функция User() служит как внешняя область видимости, которая хранит переменные username и password, а также внутреннюю функцию doLogin().
 *  Всё это частные внутренние детали этого модуля User, которые недоступны из внешнего мира.
 *  При выполнении User() создается экземпляр модуля User: новая область видимости и также совершенно новая копия каждой из внутренних переменных/функций. Мы присваиваем этот экземпляр в fred. Если мы запустим User()
 *  снова, то получим новый экземпляр, никак не связанный с fred.
 *  
 *  У внутренней функции doLogin() есть замыкание на username и password, что значит, что она сохранит свой доступ к ним даже после того, как функция User() завершит свое выполнение.

    publicAPI — это объект с одним свойством/методом, login, который является ссылкой на внутреннюю функцию doLogin(). Когда мы возвращаем publicAPI из User(), он становится экземпляром, который мы назвали fred.

    На данный момент внешняя функция User() закончила выполнение. Как правило, вы думаете, что внутренние переменные, такие как username и password, при этом исчезают. Но они никуда не деваются, потому что есть замыкание в функции login(), хранящее их.

    Вот поэтому мы можем вызвать fred.login(..), что подобно вызову внутренней doLogin(..), и у нее все еще будет доступ ко внутренним переменным username и password.
 */